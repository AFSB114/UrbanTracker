import { useEffect, useMemo, useState } from "react";
import { PermissionsAndroid, Platform } from 'react-native';
import LocationContext from "../context/LocationContext";
import type { LocationPermissionStatus } from "../types";
import Geolocation from 'react-native-geolocation-service';
import type { GeolocationResponse } from 'react-native-geolocation-service';

// Definir un tipo de ubicaci√≥n compatible
interface Location {
  latitude: number;
  longitude: number;
  accuracy: number;
  timestamp: number;
}

export default function LocationProviderGeolocation({ children }: { children: React.ReactNode }) {
  const [location, setLocation] = useState<Location | null>(null);
  const [permissionStatus, setPermissionStatus] = useState<LocationPermissionStatus>('prompt');
  const [isTracking, setIsTracking] = useState<boolean>(false);

  // Funci√≥n para convertir GeolocationResponse a nuestro formato Location
  const convertToLocation = (response: GeolocationResponse): Location => ({
    latitude: response.coords.latitude,
    longitude: response.coords.longitude,
    accuracy: response.coords.accuracy,
    timestamp: response.timestamp,
  });

  // Funci√≥n para solicitar permisos espec√≠ficos para Android
  const requestAndroidPermission = async (): Promise<boolean> => {
    if (Platform.OS !== 'android') return true;
    
    try {
      const granted = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
        {
          title: 'Permiso de Ubicaci√≥n',
          message: 'Necesitamos acceder a tu ubicaci√≥n para las funciones de la app.',
          buttonNeutral: 'Preguntar despu√©s',
          buttonNegative: 'Cancelar',
          buttonPositive: 'Aceptar',
        },
      );
      
      if (granted === PermissionsAndroid.RESULTS.GRANTED) {
        console.log('‚úÖ Permisos de ubicaci√≥n concedidos');
        return true;
      } else {
        console.log('‚ùå Permisos de ubicaci√≥n denegados:', granted);
        return false;
      }
    } catch (err) {
      console.warn('‚ùå Error solicitando permisos:', err);
      return false;
    }
  };

  // Funci√≥n para solicitar permisos y obtener ubicaci√≥n
  const requestLocation = async () => {
    try {
      console.log('üîç Solicitando permisos de ubicaci√≥n...');
      
      // Solicitar permisos espec√≠ficos para Android
      const hasPermission = await requestAndroidPermission();
      
      if (!hasPermission) {
        setPermissionStatus('denied');
        return;
      }
      
      setPermissionStatus('granted');
      
      // Obtener ubicaci√≥n actual
      console.log('üìç Obteniendo ubicaci√≥n actual...');
      
      Geolocation.getCurrentPosition(
        (position) => {
          const newLocation = convertToLocation(position);
          console.log('‚úÖ Ubicaci√≥n obtenida:', {
            lat: newLocation.latitude,
            lon: newLocation.longitude,
            accuracy: newLocation.accuracy
          });
          setLocation(newLocation);
        },
        (error) => {
          console.error('‚ùå Error obteniendo ubicaci√≥n:', error);
          if (error.code === 1) {
            console.log('‚ùå Permisos insuficientes o denegados');
            setPermissionStatus('denied');
          } else if (error.code === 2) {
            console.log('‚ùå Ubicaci√≥n no disponible (GPS desactivado?)');
          } else if (error.code === 3) {
            console.log('‚ùå Timeout obteniendo ubicaci√≥n');
          }
        },
        {
          enableHighAccuracy: true,
          timeout: 15000,
          maximumAge: 10000,
        }
      );
    } catch (error) {
      console.error('‚ùå Error en requestLocation:', error);
      setPermissionStatus('denied');
    }
  };

  // Watch position para tracking autom√°tico
  useEffect(() => {
    let watchId: number | null = null;

    if (isTracking && permissionStatus === 'granted') {
      console.log('üîÑ Iniciando tracking de ubicaci√≥n...');
      
      watchId = Geolocation.watchPosition(
        (position) => {
          const newLocation = convertToLocation(position);
          console.log('üîÑ Ubicaci√≥n actualizada:', {
            lat: newLocation.latitude,
            lon: newLocation.longitude,
            accuracy: newLocation.accuracy
          });
          setLocation(newLocation);
        },
        (error) => {
          console.error('‚ùå Error en watchPosition:', error);
        },
        {
          enableHighAccuracy: true,
          interval: 5000, // 5 segundos
          distanceFilter: 5, // 5 metros
          fastestInterval: 2000, // 2 segundos m√≠nimo
        }
      );
    }

    // Cleanup function
    return () => {
      if (watchId !== null) {
        console.log('‚èπÔ∏è Deteniendo tracking de ubicaci√≥n...');
        Geolocation.clearWatch(watchId);
      }
    };
  }, [isTracking, permissionStatus]);

  // Funci√≥n para alternar el tracking
  const toggleTracking = () => {
    setIsTracking((prev) => !prev);
  };

  const value = useMemo(
    () => ({
      location,
      permissionStatus,
      isTracking,
      requestLocation,
      toggleTracking,
    }),
    [location, permissionStatus, isTracking]
  );

  return <LocationContext.Provider value={value}>{children}</LocationContext.Provider>;
}
